# frozen_string_literal: true

require 'rails_helper'
require 'support/factory_bot'
include EventsHelper
# require 'factory_bot_rails'
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/events', type: :request do
  let(:user) { User.create!(first_name: 'John', last_name: 'Doe', email: 'john@example.com', password: 123_456) }

  let(:valid_attributes) do
    { user_id: user.id, name: 'Event Title', description: 'test', start_date_time: Date.today,
      end_date_time: Date.today }
  end

  let(:invalid_attributes) do
    {  user_id: 2, address: 785, first: 'first' }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Event.create! valid_attributes
      sign_in user
      get events_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      event = Event.create! valid_attributes
      sign_in user
      get event_url(event)
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      event = Event.create! valid_attributes
      sign_in user
      get edit_event_url(event)
      expect(response).to have_http_status(:success)
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Event' do
        expect do
          post events_url, params: { event: valid_attributes }
        end.to change(Event, :count).by(0)
      end

      it 'redirects to the created event' do
        sign_in user
        post events_url, params: { event: valid_attributes }
        event = Event.first
        expect(response).to redirect_to(event_url(event))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Event' do
        expect do
          post events_url, params: { event: invalid_attributes }
        end.to change(Event, :count).by(0)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { name: 'Updated Event Title' }
      end

      it 'updates the requested event' do
        event = Event.create! valid_attributes
        sign_in user
        patch event_url(event), params: { event: new_attributes }
        event.reload
        expect(event.name).to eq('Updated Event Title')
      end

      it 'redirects to the event' do
        event = Event.create! valid_attributes
        sign_in user
        patch event_url(event), params: { event: new_attributes }
        event.reload
        expect(response).to redirect_to(event_url(event))
      end
    end

    context 'with invalid parameters' do
      it 'renders a response with 422 status' do
        event = Event.create! valid_attributes
        sign_in user
        patch event_url(event), params: { event: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested event' do
      event = Event.create! valid_attributes
      sign_in user
      expect do
        delete event_url(event)
      end.to change(Event, :count).by(-1)
    end

    it 'redirects to the events list' do
      event = Event.create! valid_attributes
      sign_in user
      delete event_url(event)
      expect(response).to redirect_to(events_url)
    end
  end
end
